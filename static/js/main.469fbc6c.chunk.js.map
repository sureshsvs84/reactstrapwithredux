{"version":3,"sources":["constants/actionType.js","App.js","components/ApplicationComponent/userDataList/userDataListReducer.js","components/ApplicationComponent/rootApplicationReducer.js","rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","userListActionType","ADD_USERLIST","UPDATE_USERLIST","DELETE_USERLIST","FETCH_USERLIST","Layout","React","lazy","Promise","all","e","then","bind","Login","BlankPage","Register","Page404","Page500","App","react_default","a","createElement","Suspense","fallback","className","react_router","exact","path","name","render","props","Component","initialState","userDataList","combineReducers","UserDataListReducer","state","arguments","length","undefined","action","type","data","Object","objectSpread","rootApplicationReducer","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","apply","Boolean","location","hostname","match","dotenv","config","ReactDOM","react_router_dom","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.469fbc6c.chunk.js","sourcesContent":["export const userListActionType = {\r\n    ADD_USERLIST: 'ADD_USERLIST',\r\n    UPDATE_USERLIST: 'UPDATE_USERLIST',\r\n    DELETE_USERLIST:'DELETE_USERLIST',\r\n    FETCH_USERLIST:'FETCH_USERLIST'\r\n};","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\n// import { renderRoutes } from 'react-router-config';\r\nimport './App.scss';\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n// Containers\r\nconst Layout = React.lazy(() => import('./containers/DefaultLayout'));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/Pages/Login'));\r\nconst BlankPage = React.lazy(() => import('./views/Pages/BlankPage'));\r\nconst Register = React.lazy(() => import('./views/Pages/Register'));\r\nconst Page404 = React.lazy(() => import('./views/Pages/Page404'));\r\nconst Page500 = React.lazy(() => import('./views/Pages/Page500'));\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n    \r\n          <React.Suspense fallback={loading()}>\r\n            <Switch>\r\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\r\n              <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} />\r\n              <Route exact path=\"/blankPage\" name=\"Blank Page\" render={props => <BlankPage {...props}/>} />\r\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\r\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props => <Layout {...props}/>} />\r\n            </Switch>\r\n          </React.Suspense>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { userListActionType } from '../../../constants/actionType';\r\nconst initialState={\r\n        userDataList:[]\r\n}\r\nexport const UserDataListReducer = (state = initialState, action) => {\r\n    const { type, data } = action;\r\n    switch (type) {\r\n        case userListActionType.ADD_USERLIST:\r\n            state = {\r\n                ...state,\r\n                userDataList:data              \r\n            };\r\n            return state;\r\n      \r\n        case userListActionType.UPDATE_USERLIST:\r\n            state = {\r\n                ...state,\r\n               \r\n            };\r\n            return state;\r\n        \r\n        case userListActionType.DELETE_USERLIST:\r\n                state = {\r\n                    ...state,              \r\n                };\r\n                return state;\r\n        case userListActionType.FETCH_USERLIST:\r\n            state = {\r\n                ...state,\r\n                userDataList:data\r\n            };\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { UserDataListReducer } from '../ApplicationComponent/userDataList/userDataListReducer';\r\nexport default combineReducers({\r\n    UserDataListReducer\r\n});","import { combineReducers } from 'redux';\r\nimport rootApplicationReducer from './components/ApplicationComponent/rootApplicationReducer';\r\n/*\r\n * We combine all reducers into a single object before updated data is dispatched (sent) to store\r\n * Need to get the combined reducer\r\n * our entire applications state (store) is just whatever gets returned from all your reducers\r\n * */\r\nexport default combineReducers({\r\n    rootApplicationReducer   \r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [ thunk ];\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nReactDOM.render(<BrowserRouter>\r\n<Provider store={store}>\r\n<App />\r\n</Provider>\r\n</BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}